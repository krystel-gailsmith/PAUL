@{
    ViewData["Title"] = "Connect to robot";
}

<div class="text-center">
    <h1 class="display-4">ROS communication test 2</h1>
    <p>We will be testing ROS integration here.</p>


    @* @await Html.PartialAsync("~/Views/Robot/SendCommand_partial.cshtml") *@
    @*<div class="container">
            <div class="row">&nbsp;</div>
            <div class="row">
                <div class="col-2">User</div>
                <div class="col-4"><input type="text" id="userInput" /></div>
            </div>
            <div class="row">
                <div class="col-2">Message</div>
                <div class="col-4"><input type="text" id="messageInput" /></div>
            </div>
            <div class="row">&nbsp;</div>
            <div class="row">
                <div class="col-6">
                    <input type="button" id="sendButton" value="Send Message" />
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <ul id="messagesList"></ul>
            </div>
        </div>*@
</div>

<button onclick="connect()">Connect</button>
<div class="row">
    <div class="col-2"><input type="text" id="IP" name="IP" placeholder="IP address" /></div>
    <div class="col-2"><input type="text" id="PORT" name="PORT" placeholder="Port" /></div>
</div>
<div id="statusIndicator">
    <p id="connecting">
        Connecting to rosbridge...
    </p>
    <p id="connected" style="color:#00D600; display:none">
        Connected
    </p>
    <p id="error" style="color:#FF0000; display:none">
        Error in the backend!
    </p>
    <p id="closed" style="display:none">
        Connection closed.
    </p>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/chat.js"></script>
<script type="text/javascript" src="~/lib/roslib/build/roslib.min.js"></script>

<script type="text/javascript">
    // Connecting to ROS
    // -----------------
    var ros = new ROSLIB.Ros();

    // If there is an error on the backend, an 'error' emit will be emitted.
    ros.on('error', function (error) {
        document.getElementById('connecting').style.display = 'none';
        document.getElementById('connected').style.display = 'none';
        document.getElementById('closed').style.display = 'none';
        document.getElementById('error').style.display = 'inline';
        console.log(error);
    });

    // Find out exactly when we made a connection.
    ros.on('connection', function () {
        console.log('Connection made!');
        document.getElementById('connecting').style.display = 'none';
        document.getElementById('error').style.display = 'none';
        document.getElementById('closed').style.display = 'none';
        document.getElementById('connected').style.display = 'inline';
    });

    ros.on('close', function () {
        console.log('Connection closed.');
        document.getElementById('connecting').style.display = 'none';
        document.getElementById('connected').style.display = 'none';
        document.getElementById('closed').style.display = 'inline';
    });

    // Create a connection to the rosbridge WebSocket server.
    function connect() {
        var ip = document.getElementById('IP').value;
        var port = document.getElementById('PORT').value;
        var url = 'ws://' + ip + ':' + port;
        alert(url);
        ros.connect(url);
    }


    // Publishing a Topic
    // ------------------

    // First, we create a Topic object with details of the topic's name and message type.
    var cmdVel = new ROSLIB.Topic({
        ros: ros,
        name: '/cmd_vel',
        messageType: 'geometry_msgs/Twist'
    });

    // Then we create the payload to be published. The object we pass in to ros.Message matches the
    // fields defined in the geometry_msgs/Twist.msg definition.
    var twist = new ROSLIB.Message({
        linear: {
            x: 0.1,
            y: 0.2,
            z: 0.3
        },
        angular: {
            x: -0.1,
            y: -0.2,
            z: -0.3
        }
    });

    // And finally, publish.
    cmdVel.publish(twist);

    //Subscribing to a Topic
    //----------------------

    // Like when publishing a topic, we first create a Topic object with details of the topic's name
    // and message type. Note that we can call publish or subscribe on the same topic object.
    var listener = new ROSLIB.Topic({
        ros: ros,
        name: '/listener',
        messageType: 'std_msgs/String'
    });

    // Then we add a callback to be called every time a message is published on this topic.
    listener.subscribe(function (message) {
        console.log('Received message on ' + listener.name + ': ' + message.data);

        // If desired, we can unsubscribe from the topic as well.
        listener.unsubscribe();
    });

    // Calling a service
    // -----------------

    // First, we create a Service client with details of the service's name and service type.
    var addTwoIntsClient = new ROSLIB.Service({
        ros: ros,
        name: '/add_two_ints',
        serviceType: 'rospy_tutorials/AddTwoInts'
    });

    // Then we create a Service Request. The object we pass in to ROSLIB.ServiceRequest matches the
    // fields defined in the rospy_tutorials AddTwoInts.srv file.
    var request = new ROSLIB.ServiceRequest({
        a: 1,
        b: 2
    });

    // Finally, we call the /add_two_ints service and get back the results in the callback. The result
    // is a ROSLIB.ServiceResponse object.
    addTwoIntsClient.callService(request, function (result) {
        console.log('Result for service call on ' + addTwoIntsClient.name + ': ' + result.sum);
    });

    // Advertising a Service
    // ---------------------

    // The Service object does double duty for both calling and advertising services
    var setBoolServer = new ROSLIB.Service({
        ros: ros,
        name: '/set_bool',
        serviceType: 'std_srvs/SetBool'
    });

    // Use the advertise() method to indicate that we want to provide this service
    setBoolServer.advertise(function (request, response) {
        console.log('Received service request on ' + setBoolServer.name + ': ' + request.data);
        response['success'] = true;
        response['message'] = 'Set successfully';
        return true;
    });

    // Setting a param value
    // ---------------------

    ros.getParams(function (params) {
        console.log(params);
    });

    // First, we create a Param object with the name of the param.
    var maxVelX = new ROSLIB.Param({
        ros: ros,
        name: 'max_vel_y'
    });

    //Then we set the value of the param, which is sent to the ROS Parameter Server.
    maxVelX.set(0.8);
    maxVelX.get(function (value) {
        console.log('MAX VAL: ' + value);
    });

    // Getting a param value
    // ---------------------

    var favoriteColor = new ROSLIB.Param({
        ros: ros,
        name: 'favorite_color'
    });

    favoriteColor.set('red');
    favoriteColor.get(function (value) {
        console.log('My robot\'s favorite color is ' + value);
    });
</script>